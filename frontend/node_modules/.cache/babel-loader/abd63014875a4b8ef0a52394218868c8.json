{"ast":null,"code":"var _jsxFileName = \"/Users/aadhib/Downloads/Blockchain-Based-Voting-System-main/frontend/src/pages/Login.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport { Formik } from \"formik\";\nimport LoginLayout from \"../layouts/Login\";\nimport * as Yup from \"yup\";\nimport axios from \"../axios\";\nimport { AuthContext } from \"../contexts/Auth\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst schema = Yup.object().shape({\n  email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n  password: Yup.string().min(3).required(\"Required\")\n});\n\nconst Login = props => {\n  _s();\n\n  const navigate = useNavigate();\n  const authContext = useContext(AuthContext);\n  const [error, setError] = useState(\"\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(LoginLayout, {\n      error: error,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-container\",\n        children: [/*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            email: \"\",\n            password: \"\"\n          },\n          validationSchema: schema,\n          onSubmit: values => {\n            axios.post(\"/auth/login\", { ...values\n            }).then(res => {\n              authContext.authenticate(res.data.user, res.data.accessToken);\n            }).catch(err => {\n              var _err$response;\n\n              let error = err.message;\n              if (err !== null && err !== void 0 && (_err$response = err.response) !== null && _err$response !== void 0 && _err$response.data) error = JSON.stringify(err.response.data);\n              setError(error);\n            });\n          },\n          children: _ref => {\n            let {\n              errors,\n              touched,\n              getFieldProps,\n              handleSubmit\n            } = _ref;\n            return /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: handleSubmit,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"input-container\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  id: \"email\",\n                  type: \"email\",\n                  placeholder: \"Email\",\n                  ...getFieldProps(\"email\")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 48,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"form-error-text\",\n                  children: touched.email && errors.email ? errors.email : null\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 54,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"input-container\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  id: \"password\",\n                  type: \"password\",\n                  placeholder: \"Password\",\n                  ...getFieldProps(\"password\")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 60,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"form-error-text\",\n                  children: touched.password && errors.password ? errors.password : null\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 66,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"login-button button-primary\",\n                type: \"submit\",\n                children: \"Login\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 15\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => navigate(\"/signup\"),\n          className: \"button-secondary\",\n          children: \"Create a New Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"B5I8uXhS5+tuRyb7QHf8UoqDXBM=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/aadhib/Downloads/Blockchain-Based-Voting-System-main/frontend/src/pages/Login.tsx"],"names":["React","useState","useContext","useNavigate","Formik","LoginLayout","Yup","axios","AuthContext","schema","object","shape","email","string","required","password","min","Login","props","navigate","authContext","error","setError","values","post","then","res","authenticate","data","user","accessToken","catch","err","message","response","JSON","stringify","errors","touched","getFieldProps","handleSubmit"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport { Formik } from \"formik\";\nimport { RouteProps } from \"react-router\";\nimport LoginLayout from \"../layouts/Login\";\nimport * as Yup from \"yup\";\nimport axios from \"../axios\";\nimport { AuthContext } from \"../contexts/Auth\";\n\nconst schema = Yup.object().shape({\n  email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n  password: Yup.string().min(3).required(\"Required\"),\n});\n\nconst Login = (props: RouteProps): JSX.Element => {\n  const navigate = useNavigate();\n  const authContext = useContext(AuthContext);\n\n  const [error, setError] = useState<any>(\"\");\n\n  return (\n    <div>\n      <LoginLayout error={error}>\n        <div className=\"form-container\">\n          <Formik\n            initialValues={{\n              email: \"\",\n              password: \"\",\n            }}\n            validationSchema={schema}\n            onSubmit={(values) => {\n              axios\n                .post(\"/auth/login\", { ...values })\n                .then((res) => {\n                  authContext.authenticate(res.data.user, res.data.accessToken);\n                })\n                .catch((err) => {\n                  let error = err.message;\n                  if (err?.response?.data)\n                    error = JSON.stringify(err.response.data);\n                  setError(error);\n                });\n            }}\n          >\n            {({ errors, touched, getFieldProps, handleSubmit }) => (\n              <form onSubmit={handleSubmit}>\n                <div className=\"input-container\">\n                  <input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"Email\"\n                    {...getFieldProps(\"email\")}\n                  />\n                  <div className=\"form-error-text\">\n                    {touched.email && errors.email ? errors.email : null}\n                  </div>\n                </div>\n\n                <div className=\"input-container\">\n                  <input\n                    id=\"password\"\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    {...getFieldProps(\"password\")}\n                  />\n                  <div className=\"form-error-text\">\n                    {touched.password && errors.password\n                      ? errors.password\n                      : null}\n                  </div>\n                </div>\n\n                <button className=\"login-button button-primary\" type=\"submit\">\n                  Login\n                </button>\n              </form>\n            )}\n          </Formik>\n\n          {/* <div className=\"form-info-text\">Forgot Password?</div> */}\n\n          <hr />\n\n          <button\n            onClick={() => navigate(\"/signup\")}\n            className=\"button-secondary\"\n          >\n            Create a New Account\n          </button>\n        </div>\n      </LoginLayout>\n    </div>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}